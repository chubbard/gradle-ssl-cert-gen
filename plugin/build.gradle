plugins {
    id 'java-gradle-plugin'
    id 'groovy'
    id 'com.gradle.plugin-publish' version '1.3.1'
    id 'idea'
}

group = "com.fuseanalytics"
version = "1.1.1"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.bouncycastle:bcprov-jdk18on:1.80",
            "org.bouncycastle:bcprov-ext-jdk18on:1.78.1",
            "org.bouncycastle:bcpkix-jdk18on:1.80"

    testImplementation 'org.spockframework:spock-core:2.3-groovy-3.0'
    testImplementation gradleTestKit()
}

gradlePlugin {
    website = "https://github.com/chubbard/gradle-ssl-cert-gen"
    vcsUrl = "https://github.com/chubbard/gradle-ssl-cert-gen.git"
    plugins {
        create("sslCertGen") {
            id = 'com.fuseanalytics.gradle.sslcertgen'
            implementationClass = 'com.fuseanalytics.gradle.x509.SslCertGenPlugin'
            description = "This plugin creates a self-signed certificate using 100% Java solution so it is portable."
            displayName = 'Gradle SSLCertGen Plugin'
            tags = ['ssl', 'keystore', 'tls', 'x509', 'certificate', 'self-signed']
        }
    }
}
/*
pluginBundle {
    website = "https://github.com/chubbard/gradle-ssl-cert-gen"
    vcsUrl = "https://github.com/chubbard/gradle-ssl-cert-gen.git"
    description = "This plugin creates a self-signed certificate using 100% Java solution so it is portable."

    mavenCoordinates {
        groupId = project.group
        artifactId = project.name
        version = project.version
    }

    plugins {
        sslCertGen {
            displayName = 'Gradle SSLCertGen Plugin'
            tags = ['ssl', 'keystore', 'tls', 'x509', 'certificate', 'self-signed']
        }
    }
}
*/
// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    useJUnitPlatform()
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)

tasks.named('check') {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

tasks.named('test', Test) {
    // Use JUnit Jupiter for unit tests.
    useJUnitPlatform()
}
